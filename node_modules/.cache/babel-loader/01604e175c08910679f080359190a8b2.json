{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport { takeLatest, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { userType } from '../types';\nimport { API_URL } from '../../configs'; // watcher saga: watches for actions dispatched to the store, starts worker saga\n\nfunction* loginUser(action) {\n  const {\n    data,\n    callback\n  } = action.payload;\n  const {\n    sdt,\n    password\n  } = data;\n\n  try {\n    var _response$data;\n\n    const response = yield call(() => axios.post(`${API_URL}/auth/login`, {\n      sdt,\n      password\n    }));\n    yield put({\n      type: userType.LOGIN_SUCCESS,\n      payload: {\n        data: response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.data\n      }\n    });\n    callback(response === null || response === void 0 ? void 0 : response.data);\n  } catch (error) {\n    var _error$response;\n\n    callback(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n  }\n}\n\nfunction* registerUser(action) {\n  const {\n    data,\n    callback\n  } = action.payload;\n  const {\n    sdt,\n    password,\n    name,\n    accountType\n  } = data;\n\n  try {\n    var _response$data2;\n\n    const response = yield call(() => axios.post(`${API_URL}/auth/login`, {\n      sdt,\n      password,\n      name\n    }));\n    yield put({\n      type: userType.LOGIN_SUCCESS,\n      payload: {\n        data: response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.data\n      }\n    });\n    callback(response === null || response === void 0 ? void 0 : response.data);\n  } catch (error) {\n    var _error$response2;\n\n    callback(error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  }\n}\n\nexport default function* userSagas() {\n  yield takeLatest(userType.LOGIN, registerUser);\n  yield takeLatest(userType.REGISTER, loginUser);\n}","map":{"version":3,"sources":["/home/ngoclong/ReactJS/e-learning/src/redux/sagas/user.js"],"names":["takeLatest","call","put","axios","userType","API_URL","loginUser","action","data","callback","payload","sdt","password","response","post","type","LOGIN_SUCCESS","error","registerUser","name","accountType","userSagas","LOGIN","REGISTER"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,SAASC,OAAT,QAAwB,eAAxB,C,CAEA;;AACA,UAAUC,SAAV,CAAoBC,MAApB,EAA4B;AAC1B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBF,MAAM,CAACG,OAAlC;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAoBJ,IAA1B;;AAEA,MAAI;AAAA;;AACF,UAAMK,QAAQ,GAAG,MAAMZ,IAAI,CACzB,MAAME,KAAK,CAACW,IAAN,CAAY,GAAET,OAAQ,aAAtB,EAAoC;AACxCM,MAAAA,GADwC;AAExCC,MAAAA;AAFwC,KAApC,CADmB,CAA3B;AAMA,UAAMV,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAEX,QAAQ,CAACY,aADP;AAERN,MAAAA,OAAO,EAAE;AAAEF,QAAAA,IAAI,EAAEK,QAAF,aAAEA,QAAF,yCAAEA,QAAQ,CAAEL,IAAZ,mDAAE,eAAgBA;AAAxB;AAFD,KAAD,CAAT;AAIAC,IAAAA,QAAQ,CAACI,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEL,IAAX,CAAR;AACD,GAZD,CAYE,OAAOS,KAAP,EAAc;AAAA;;AACdR,IAAAA,QAAQ,CAACQ,KAAD,aAACA,KAAD,0CAACA,KAAK,CAAEJ,QAAR,oDAAC,gBAAiBL,IAAlB,CAAR;AACD;AACF;;AACD,UAAUU,YAAV,CAAuBX,MAAvB,EAA+B;AAC7B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBF,MAAM,CAACG,OAAlC;AACA,QAAM;AACJC,IAAAA,GADI;AAEJC,IAAAA,QAFI;AAGJO,IAAAA,IAHI;AAIJC,IAAAA;AAJI,MAKFZ,IALJ;;AAOA,MAAI;AAAA;;AACF,UAAMK,QAAQ,GAAG,MAAMZ,IAAI,CACzB,MAAME,KAAK,CAACW,IAAN,CAAY,GAAET,OAAQ,aAAtB,EAAoC;AACxCM,MAAAA,GADwC;AAExCC,MAAAA,QAFwC;AAGxCO,MAAAA;AAHwC,KAApC,CADmB,CAA3B;AAQA,UAAMjB,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAEX,QAAQ,CAACY,aADP;AAERN,MAAAA,OAAO,EAAE;AAAEF,QAAAA,IAAI,EAAEK,QAAF,aAAEA,QAAF,0CAAEA,QAAQ,CAAEL,IAAZ,oDAAE,gBAAgBA;AAAxB;AAFD,KAAD,CAAT;AAIAC,IAAAA,QAAQ,CAACI,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEL,IAAX,CAAR;AACD,GAdD,CAcE,OAAOS,KAAP,EAAc;AAAA;;AACdR,IAAAA,QAAQ,CAACQ,KAAD,aAACA,KAAD,2CAACA,KAAK,CAAEJ,QAAR,qDAAC,iBAAiBL,IAAlB,CAAR;AACD;AACF;;AACD,eAAe,UAAUa,SAAV,GAAsB;AACnC,QAAMrB,UAAU,CAACI,QAAQ,CAACkB,KAAV,EAAiBJ,YAAjB,CAAhB;AACA,QAAMlB,UAAU,CAACI,QAAQ,CAACmB,QAAV,EAAoBjB,SAApB,CAAhB;AACD","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { takeLatest, call, put } from 'redux-saga/effects'\nimport axios from 'axios'\nimport { userType } from '../types'\nimport { API_URL } from '../../configs'\n\n// watcher saga: watches for actions dispatched to the store, starts worker saga\nfunction* loginUser(action) {\n  const { data, callback } = action.payload\n  const { sdt, password } = data\n\n  try {\n    const response = yield call(\n      () => axios.post(`${API_URL}/auth/login`, {\n        sdt,\n        password,\n      })\n    )\n    yield put({\n      type: userType.LOGIN_SUCCESS,\n      payload: { data: response?.data?.data },\n    })\n    callback(response?.data)\n  } catch (error) {\n    callback(error?.response?.data)\n  }\n}\nfunction* registerUser(action) {\n  const { data, callback } = action.payload\n  const {\n    sdt,\n    password,\n    name,\n    accountType,\n  } = data\n\n  try {\n    const response = yield call(\n      () => axios.post(`${API_URL}/auth/login`, {\n        sdt,\n        password,\n        name,\n      })\n    )\n\n    yield put({\n      type: userType.LOGIN_SUCCESS,\n      payload: { data: response?.data?.data },\n    })\n    callback(response?.data)\n  } catch (error) {\n    callback(error?.response?.data)\n  }\n}\nexport default function* userSagas() {\n  yield takeLatest(userType.LOGIN, registerUser)\n  yield takeLatest(userType.REGISTER, loginUser)\n}\n"]},"metadata":{},"sourceType":"module"}