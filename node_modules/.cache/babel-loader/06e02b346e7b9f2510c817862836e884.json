{"ast":null,"code":"const NAMESPACE = 'revo-dropdown';\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || {\n  head: {}\n};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\n\nconst promiseResolve = v => Promise.resolve(v);\n\nconst supportsConstructibleStylesheets = /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return true;\n  } catch (e) {}\n\n  return false;\n})();\n\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n  if (listeners) {\n    listeners.map(([flags, name, method]) => {\n      const target = getHostListenerTarget(elm, flags);\n      const handler = hostListenerProxy(hostRef, method);\n      const opts = hostListenerOpts(flags);\n      plt.ael(target, name, handler, opts);\n      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n    });\n  }\n};\n\nconst hostListenerProxy = (hostRef, methodName) => ev => {\n  try {\n    {\n      if (hostRef.$flags$ & 256\n      /* isListenReady */\n      ) {\n          // instance is ready, let's call it's member method for this event\n          hostRef.$lazyInstance$[methodName](ev);\n        } else {\n        (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n      }\n    }\n  } catch (e) {\n    consoleError(e);\n  }\n};\n\nconst getHostListenerTarget = (elm, flags) => {\n  if (flags & 4\n  /* TargetDocument */\n  ) return doc;\n  return elm;\n}; // prettier-ignore\n\n\nconst hostListenerOpts = flags => (flags & 2\n/* Capture */\n) !== 0;\n\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\n\nconst createTime = (fnName, tagName = '') => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst uniqueTime = (key, measureText) => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst rootAppliedStyles = new WeakMap();\n\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n\n  if (supportsConstructibleStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    style.replace(cssText);\n  } else {\n    style = cssText;\n  }\n\n  styles.set(scopeId, style);\n};\n\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n  let scopeId = getScopeId(cmpMeta);\n  let style = styles.get(scopeId); // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n\n  styleContainerNode = styleContainerNode.nodeType === 11\n  /* DocumentFragment */\n  ? styleContainerNode : doc;\n\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n\n      if (!appliedStyles.has(scopeId)) {\n        {\n          {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n\n  return scopeId;\n};\n\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  const scopeId = addStyle(elm.getRootNode(), cmpMeta);\n  endAttachStyles();\n};\n\nconst getScopeId = (cmp, mode) => 'sc-' + cmp.$tagName$;\n/**\n * Default style mode id\n */\n\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\n\n\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\n\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\n\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\n\n\nconst h = (nodeName, vnodeData, ...children) => {\n  let child = null;\n  let key = null;\n  let simple = false;\n  let lastSimple = false;\n  let vNodeChildren = [];\n\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        }\n\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n\n        lastSimple = simple;\n      }\n    }\n  };\n\n  walk(children);\n\n  if (vnodeData) {\n    // normalize class / classname attributes\n    if (vnodeData.key) {\n      key = vnodeData.key;\n    }\n\n    {\n      const classData = vnodeData.className || vnodeData.class;\n\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(k => classData[k]).join(' ');\n      }\n    }\n  }\n\n  if (typeof nodeName === 'function') {\n    // nodeName is a functional component\n    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n  }\n\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n\n  {\n    vnode.$key$ = key;\n  }\n  return vnode;\n};\n\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  {\n    vnode.$attrs$ = null;\n  }\n  {\n    vnode.$key$ = null;\n  }\n  return vnode;\n};\n\nconst Host = {};\n\nconst isHost = node => node && node.$tag$ === Host;\n\nconst vdomFnUtils = {\n  forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n  map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate)\n};\n\nconst convertToPublic = node => ({\n  vattrs: node.$attrs$,\n  vchildren: node.$children$,\n  vkey: node.$key$,\n  vname: node.$name$,\n  vtag: node.$tag$,\n  vtext: node.$text$\n});\n\nconst convertToPrivate = node => {\n  if (typeof node.vtag === 'function') {\n    const vnodeData = Object.assign({}, node.vattrs);\n\n    if (node.vkey) {\n      vnodeData.key = node.vkey;\n    }\n\n    if (node.vname) {\n      vnodeData.name = node.vname;\n    }\n\n    return h(node.vtag, vnodeData, ...(node.vchildren || []));\n  }\n\n  const vnode = newVNode(node.vtag, node.vtext);\n  vnode.$attrs$ = node.vattrs;\n  vnode.$children$ = node.vchildren;\n  vnode.$key$ = node.vkey;\n  vnode.$name$ = node.vname;\n  return vnode;\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n\n\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    let ln = memberName.toLowerCase();\n\n    if (memberName === 'class') {\n      const classList = elm.classList;\n      const oldClasses = parseClassList(oldValue);\n      const newClasses = parseClassList(newValue);\n      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n    } else if (memberName === 'style') {\n      // update style attribute, css properties and values\n      {\n        for (const prop in oldValue) {\n          if (!newValue || newValue[prop] == null) {\n            if (prop.includes('-')) {\n              elm.style.removeProperty(prop);\n            } else {\n              elm.style[prop] = '';\n            }\n          }\n        }\n      }\n\n      for (const prop in newValue) {\n        if (!oldValue || newValue[prop] !== oldValue[prop]) {\n          if (prop.includes('-')) {\n            elm.style.setProperty(prop, newValue[prop]);\n          } else {\n            elm.style[prop] = newValue[prop];\n          }\n        }\n      }\n    } else if (memberName === 'key') ;else if (memberName === 'ref') {\n      // minifier will clean this up\n      if (newValue) {\n        newValue(elm);\n      }\n    } else if (!isProp && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, false);\n      }\n\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, false);\n      }\n    } else {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            let n = newValue == null ? '' : newValue; // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n\n            if (memberName === 'list') {\n              isProp = false; // tslint:disable-next-line: triple-equals\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n      /**\n       * Need to manually update attribute if:\n       * - memberName is not an attribute\n       * - if we are rendering the host element in order to reflect attribute\n       * - if it's a SVG, since properties might not work in <svg>\n       * - if the newValue is null/undefined or 'false'.\n       */\n\n\n      let xlink = false;\n      {\n        if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n          memberName = ln;\n          xlink = true;\n        }\n      }\n\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          if (xlink) {\n            elm.removeAttributeNS(XLINK_NS, memberName);\n          } else {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4\n      /* isHost */\n      || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n\n        if (xlink) {\n          elm.setAttributeNS(XLINK_NS, memberName, newValue);\n        } else {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\n\nconst parseClassListRegex = /\\s/;\n\nconst parseClassList = value => !value ? [] : value.split(parseClassListRegex);\n\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11\n  /* DocumentFragment */\n  && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  } // add new & update changed attributes\n\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  // tslint:disable-next-line: prefer-const\n  let newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n\n  if (newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else {\n    if (!isSvgMode) {\n      isSvgMode = newVNode.$tag$ === 'svg';\n    } // create element\n\n\n    elm = newVNode.$elm$ = doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$tag$);\n\n    if (isSvgMode && newVNode.$tag$ === 'foreignObject') {\n      isSvgMode = false;\n    } // add css classes, attrs, props, listeners, etc.\n\n\n    {\n      updateElement(null, newVNode, isSvgMode);\n    }\n\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i); // return node could have been null\n\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n\n    {\n      if (newVNode.$tag$ === 'svg') {\n        // Only reset the SVG context when we're exiting <svg> element\n        isSvgMode = false;\n      } else if (elm.tagName === 'foreignObject') {\n        // Reenter SVG context when we're exiting <foreignObject> element\n        isSvgMode = true;\n      }\n    }\n  }\n\n  return elm;\n};\n\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = parentElm;\n  let childNode;\n\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx);\n\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, before);\n      }\n    }\n  }\n};\n\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$;\n      callNodeRefs(vnode); // remove the vnode's element from the dom\n\n      elm.remove();\n    }\n  }\n};\n\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let idxInOld = 0;\n  let i = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n  let elmToMove;\n\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // Vnode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      patch(oldStartVnode, newEndVnode);\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      patch(oldEndVnode, newStartVnode);\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      // createKeyToOldIdx\n      idxInOld = -1;\n      {\n        for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n          if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n            idxInOld = i;\n            break;\n          }\n        }\n      }\n\n      if (idxInOld >= 0) {\n        elmToMove = oldCh[idxInOld];\n\n        if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n          node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld);\n        } else {\n          patch(elmToMove, newStartVnode);\n          oldCh[idxInOld] = undefined;\n          node = elmToMove.$elm$;\n        }\n\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        // new element\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n        newStartVnode = newCh[++newStartIdx];\n      }\n\n      if (node) {\n        {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n\nconst isSameVnode = (vnode1, vnode2) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (vnode1.$tag$ === vnode2.$tag$) {\n    {\n      return vnode1.$key$ === vnode2.$key$;\n    }\n  }\n\n  return false;\n};\n\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  const tag = newVNode.$tag$;\n  const text = newVNode.$text$;\n\n  if (text === null) {\n    {\n      // test if we're rendering an svg element, or still rendering nodes inside of one\n      // only add this to the when the compiler sees we're using an svg somewhere\n      isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n    } // element node\n\n    {\n      {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n\n    if (oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      } // add the new vnode children\n\n\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n\n    if (isSvgMode && tag === 'svg') {\n      isSvgMode = false;\n    }\n  } else if (oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\n\nconst callNodeRefs = vNode => {\n  {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n    vNode.$children$ && vNode.$children$.map(callNodeRefs);\n  }\n};\n\nconst renderVdom = (hostRef, renderFnResults) => {\n  const hostElm = hostRef.$hostElement$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4\n  /* isHost */\n  ;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = hostElm; // synchronous patch\n\n  patch(oldVNode, rootVnode);\n};\n\nconst getElement = ref => getHostRef(ref).$hostElement$;\n\nconst createEvent = (ref, name, flags) => {\n  const elm = getElement(ref);\n  return {\n    emit: detail => {\n      return emitEvent(elm, name, {\n        bubbles: !!(flags & 4\n        /* Bubbles */\n        ),\n        composed: !!(flags & 2\n        /* Composed */\n        ),\n        cancelable: !!(flags & 1\n        /* Cancellable */\n        ),\n        detail\n      });\n    }\n  };\n};\n\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\n\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\n\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  {\n    hostRef.$flags$ |= 16\n    /* isQueuedForUpdate */\n    ;\n  }\n\n  if (hostRef.$flags$ & 4\n  /* isWaitingForChildren */\n  ) {\n      hostRef.$flags$ |= 512\n      /* needsRerender */\n      ;\n      return;\n    }\n\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$); // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n\n  return writeTask(dispatch);\n};\n\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = hostRef.$lazyInstance$;\n  let promise;\n\n  if (isInitialLoad) {\n    {\n      hostRef.$flags$ |= 256\n      /* isListenReady */\n      ;\n\n      if (hostRef.$queuedListeners$) {\n        hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n        hostRef.$queuedListeners$ = null;\n      }\n    }\n    {\n      promise = safeCall(instance, 'componentWillLoad');\n    }\n  }\n\n  endSchedule();\n  return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n  // updateComponent\n  const elm = hostRef.$hostElement$;\n  const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n  const rc = elm['s-rc'];\n\n  if (isInitialLoad) {\n    // DOM WRITE!\n    attachStyles(hostRef);\n  }\n\n  const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n  {\n    {\n      // looks like we've got child nodes to render into this host element\n      // or we need to update the css class/attrs on the host element\n      // DOM WRITE!\n      {\n        renderVdom(hostRef, callRender(hostRef, instance));\n      }\n    }\n  }\n\n  if (rc) {\n    // ok, so turns out there are some child host elements\n    // waiting on this parent element to load\n    // let's fire off all update callbacks waiting\n    rc.map(cb => cb());\n    elm['s-rc'] = undefined;\n  }\n\n  endRender();\n  endUpdate();\n  {\n    const childrenPromises = elm['s-p'];\n\n    const postUpdate = () => postUpdateComponent(hostRef);\n\n    if (childrenPromises.length === 0) {\n      postUpdate();\n    } else {\n      Promise.all(childrenPromises).then(postUpdate);\n      hostRef.$flags$ |= 4\n      /* isWaitingForChildren */\n      ;\n      childrenPromises.length = 0;\n    }\n  }\n};\n\nconst callRender = (hostRef, instance) => {\n  try {\n    instance = instance.render();\n    {\n      hostRef.$flags$ &= ~16\n      /* isQueuedForUpdate */\n      ;\n    }\n    {\n      hostRef.$flags$ |= 2\n      /* hasRendered */\n      ;\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n\n  return instance;\n};\n\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const instance = hostRef.$lazyInstance$;\n  const ancestorComponent = hostRef.$ancestorComponent$;\n  {\n    safeCall(instance, 'componentDidRender');\n  }\n\n  if (!(hostRef.$flags$ & 64\n  /* hasLoadedComponent */\n  )) {\n    hostRef.$flags$ |= 64\n    /* hasLoadedComponent */\n    ;\n    {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    endPostUpdate();\n    {\n      hostRef.$onReadyResolve$(elm);\n\n      if (!ancestorComponent) {\n        appDidLoad();\n      }\n    }\n  } else {\n    endPostUpdate();\n  }\n\n  {\n    hostRef.$onInstanceResolve$(elm);\n  } // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n\n  {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n\n    if (hostRef.$flags$ & 512\n    /* needsRerender */\n    ) {\n        nextTick(() => scheduleUpdate(hostRef, false));\n      }\n\n    hostRef.$flags$ &= ~(4\n    /* isWaitingForChildren */\n    | 512\n    /* needsRerender */\n    );\n  } // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  {\n    addHydratedFlag(doc.documentElement);\n  }\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n};\n\nconst safeCall = (instance, method, arg) => {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  return undefined;\n};\n\nconst then = (promise, thenFn) => {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\n\nconst addHydratedFlag = elm => elm.classList.add('hydrated');\n\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (propType & 4\n    /* Boolean */\n    ) {\n        // per the HTML spec, any string value means it is a boolean true value\n        // but we'll cheat here and say that the string \"false\" is the boolean false\n        return propValue === 'false' ? false : propValue === '' || !!propValue;\n      }\n\n    if (propType & 2\n    /* Number */\n    ) {\n        // force it to be a number\n        return parseFloat(propValue);\n      }\n\n    if (propType & 1\n    /* String */\n    ) {\n        // could have been passed as a number or boolean\n        // but we still want it as a string\n        return String(propValue);\n      } // redundant return here for better minification\n\n\n    return propValue;\n  } // not sure exactly what type we want\n  // so no need to change to a different type\n\n\n  return propValue;\n};\n\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\n\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const elm = hostRef.$hostElement$;\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = hostRef.$lazyInstance$;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n\n  if ((!(flags & 8\n  /* isConstructingInstance */\n  ) || oldVal === undefined) && newVal !== oldVal) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n\n    if (instance) {\n      // get an array of method names of watch functions to call\n      if (cmpMeta.$watchers$ && flags & 128\n      /* isWatchReady */\n      ) {\n          const watchMethods = cmpMeta.$watchers$[propName];\n\n          if (watchMethods) {\n            // this instance is watching for when this property changed\n            watchMethods.map(watchMethodName => {\n              try {\n                // fire off each of the watch methods that are watching this property\n                instance[watchMethodName](newVal, oldVal, propName);\n              } catch (e) {\n                consoleError(e, elm);\n              }\n            });\n          }\n        }\n\n      if ((flags & (2\n      /* hasRendered */\n      | 16\n      /* isQueuedForUpdate */\n      )) === 2\n      /* hasRendered */\n      ) {\n          // looks like this value actually changed, so we've got work to do!\n          // but only if we've already rendered, otherwise just chill out\n          // queue that we need to do an update, but don't worry about queuing\n          // up millions cuz this function ensures it only runs once\n          scheduleUpdate(hostRef, false);\n        }\n    }\n  }\n};\n\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  if (cmpMeta.$members$) {\n    if (Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    } // It's better to have a const than two Object.entries()\n\n\n    const members = Object.entries(cmpMeta.$members$);\n    const prototype = Cstr.prototype;\n    members.map(([memberName, [memberFlags]]) => {\n      if (memberFlags & 31\n      /* Prop */\n      || flags & 2\n      /* proxyState */\n      && memberFlags & 32\n      /* State */\n      ) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n\n          set(newValue) {\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n\n          configurable: true,\n          enumerable: true\n        });\n      } else if (flags & 1\n      /* isElementConstructor */\n      && memberFlags & 64\n      /* Method */\n      ) {\n          // proxyComponent - method\n          Object.defineProperty(prototype, memberName, {\n            value(...args) {\n              const ref = getHostRef(this);\n              return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n            }\n\n          });\n        }\n    });\n\n    if (flags & 1\n    /* isElementConstructor */\n    ) {\n        const attrNameToPropName = new Map();\n\n        prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n          plt.jmp(() => {\n            const propName = attrNameToPropName.get(attrName);\n            this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n          });\n        }; // create an array of attributes to observe\n        // and also create a map of html attribute name to js property name\n\n\n        Cstr.observedAttributes = members.filter(([_, m]) => m[0] & 15\n        /* HasAttribute */\n        ) // filter to only keep props that should match attributes\n        .map(([propName, m]) => {\n          const attrName = m[1] || propName;\n          attrNameToPropName.set(attrName, propName);\n          return attrName;\n        });\n      }\n  }\n\n  return Cstr;\n};\n\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n  // initializeComponent\n  if ((hostRef.$flags$ & 32\n  /* hasInitializedComponent */\n  ) === 0) {\n    {\n      // we haven't initialized this element yet\n      hostRef.$flags$ |= 32\n      /* hasInitializedComponent */\n      ; // lazy loaded components\n      // request the component's implementation to be\n      // wired up with the host element\n\n      Cstr = loadModule(cmpMeta);\n\n      if (Cstr.then) {\n        // Await creates a micro-task avoid if possible\n        const endLoad = uniqueTime();\n        Cstr = await Cstr;\n        endLoad();\n      }\n\n      if (!Cstr.isProxied) {\n        // we'eve never proxied this Constructor before\n        // let's add the getters/setters to its prototype before\n        // the first time we create an instance of the implementation\n        {\n          cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        proxyComponent(Cstr, cmpMeta, 2\n        /* proxyState */\n        );\n        Cstr.isProxied = true;\n      }\n\n      const endNewInstance = createTime('createInstance', cmpMeta.$tagName$); // ok, time to construct the instance\n      // but let's keep track of when we start and stop\n      // so that the getters/setters don't incorrectly step on data\n\n      {\n        hostRef.$flags$ |= 8\n        /* isConstructingInstance */\n        ;\n      } // construct the lazy-loaded component implementation\n      // passing the hostRef is very important during\n      // construction in order to directly wire together the\n      // host element and the lazy-loaded instance\n\n      try {\n        new Cstr(hostRef);\n      } catch (e) {\n        consoleError(e);\n      }\n\n      {\n        hostRef.$flags$ &= ~8\n        /* isConstructingInstance */\n        ;\n      }\n      {\n        hostRef.$flags$ |= 128\n        /* isWatchReady */\n        ;\n      }\n      endNewInstance();\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    }\n\n    if (Cstr.style) {\n      // this component has styles but we haven't registered them yet\n      let style = Cstr.style;\n      const scopeId = getScopeId(cmpMeta);\n\n      if (!styles.has(scopeId)) {\n        const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n        registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1\n        /* shadowDomEncapsulation */\n        ));\n        endRegisterStyles();\n      }\n    }\n  } // we've successfully created a lazy instance\n\n\n  const ancestorComponent = hostRef.$ancestorComponent$;\n\n  const schedule = () => scheduleUpdate(hostRef, true);\n\n  if (ancestorComponent && ancestorComponent['s-rc']) {\n    // this is the intial load and this component it has an ancestor component\n    // but the ancestor component has NOT fired its will update lifecycle yet\n    // so let's just cool our jets and wait for the ancestor to continue first\n    // this will get fired off when the ancestor component\n    // finally gets around to rendering its lazy self\n    // fire off the initial update\n    ancestorComponent['s-rc'].push(schedule);\n  } else {\n    schedule();\n  }\n};\n\nconst fireConnectedCallback = instance => {\n  {\n    safeCall(instance, 'connectedCallback');\n  }\n};\n\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n\n    if (!(hostRef.$flags$ & 1\n    /* hasConnected */\n    )) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1\n      /* hasConnected */\n      ;\n      {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      } // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n\n      if (cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n          if (memberFlags & 31\n          /* Prop */\n          && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n\n      {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    } else {\n      // not the first time this has connected\n      // reattach any event listeners to the host\n      // since they would have been removed when disconnected\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$); // fire off connectedCallback() on component instance\n\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    }\n\n    endConnected();\n  }\n};\n\nconst disconnectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const instance = hostRef.$lazyInstance$;\n    {\n      if (hostRef.$rmListeners$) {\n        hostRef.$rmListeners$.map(rmListener => rmListener());\n        hostRef.$rmListeners$ = undefined;\n      }\n    }\n    {\n      safeCall(instance, 'disconnectedCallback');\n    }\n  }\n};\n\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n  const endBootstrap = createTime();\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  let appLoadFallback;\n  let isBootstrapping = true;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  lazyBundles.map(lazyBundle => lazyBundle[1].map(compactMeta => {\n    const cmpMeta = {\n      $flags$: compactMeta[0],\n      $tagName$: compactMeta[1],\n      $members$: compactMeta[2],\n      $listeners$: compactMeta[3]\n    };\n    {\n      cmpMeta.$members$ = compactMeta[2];\n    }\n    {\n      cmpMeta.$listeners$ = compactMeta[3];\n    }\n    {\n      cmpMeta.$watchers$ = {};\n    }\n    const tagName = cmpMeta.$tagName$;\n    const HostElement = class extends HTMLElement {\n      // StencilLazyHost\n      constructor(self) {\n        // @ts-ignore\n        super(self);\n        self = this;\n        registerHost(self, cmpMeta);\n      }\n\n      connectedCallback() {\n        if (appLoadFallback) {\n          clearTimeout(appLoadFallback);\n          appLoadFallback = null;\n        }\n\n        if (isBootstrapping) {\n          // connectedCallback will be processed once all components have been registered\n          deferredConnectedCallbacks.push(this);\n        } else {\n          plt.jmp(() => connectedCallback(this));\n        }\n      }\n\n      disconnectedCallback() {\n        plt.jmp(() => disconnectedCallback(this));\n      }\n\n      componentOnReady() {\n        return getHostRef(this).$onReadyPromise$;\n      }\n\n    };\n    cmpMeta.$lazyBundleId$ = lazyBundle[0];\n\n    if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n      cmpTags.push(tagName);\n      customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1\n      /* isElementConstructor */\n      ));\n    }\n  }));\n  {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  } // Process deferred connectedCallbacks now all components have been registered\n\n  isBootstrapping = false;\n\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  } // Fallback appLoad event\n\n\n  endBootstrap();\n};\n\nconst hostRefs = new WeakMap();\n\nconst getHostRef = ref => hostRefs.get(ref);\n\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n\nconst registerHost = (elm, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  {\n    hostRef.$onInstancePromise$ = new Promise(r => hostRef.$onInstanceResolve$ = r);\n  }\n  {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n  addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n  return hostRefs.set(elm, hostRef);\n};\n\nconst isMemberInElement = (elm, memberName) => memberName in elm;\n\nconst consoleError = (e, el) => (0, console.error)(e, el);\n\nconst cmpModules = /*@__PURE__*/new Map();\n\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n  const module = cmpModules.get(bundleId);\n\n  if (module) {\n    return module[exportName];\n  }\n\n  return import(\n  /* webpackInclude: /\\.entry\\.js$/ */\n\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n\n  /* webpackMode: \"lazy\" */\n  `./${bundleId}.entry.js${''}`).then(importedModule => {\n    {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\n\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\n\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n\n  if (!queuePending) {\n    queuePending = true;\n\n    if (write && plt.$flags$ & 4\n    /* queueSync */\n    ) {\n        nextTick(flush);\n      } else {\n      plt.raf(flush);\n    }\n  }\n};\n\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  queue.length = 0;\n};\n\nconst flush = () => {\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads); // DOM WRITES!!!\n\n  {\n    consume(queueDomWrites);\n\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\n\nconst nextTick = /*@__PURE__*/cb => promiseResolve().then(cb);\n\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nexport { Host as H, bootstrapLazy as b, createEvent as c, h, promiseResolve as p, registerInstance as r };","map":{"version":3,"sources":["/home/ngoclong/ReactJS/e-learning/node_modules/@revolist/revo-dropdown/dist/esm/index-d90c08e5.js"],"names":["NAMESPACE","isSvgMode","queuePending","win","window","doc","document","head","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","ce","CustomEvent","promiseResolve","v","Promise","resolve","supportsConstructibleStylesheets","CSSStyleSheet","e","addHostEventListeners","elm","hostRef","listeners","attachParentListeners","map","flags","name","method","target","getHostListenerTarget","handler","hostListenerProxy","hostListenerOpts","$rmListeners$","push","methodName","ev","$lazyInstance$","$queuedListeners$","consoleError","HYDRATED_CSS","XLINK_NS","createTime","fnName","tagName","uniqueTime","key","measureText","rootAppliedStyles","WeakMap","registerStyle","scopeId","cssText","allowCS","style","styles","get","replace","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","nodeType","appliedStyles","styleElm","Set","has","createElement","innerHTML","insertBefore","querySelector","add","adoptedStyleSheets","includes","attachStyles","$cmpMeta$","$hostElement$","endAttachStyles","$tagName$","getRootNode","cmp","EMPTY_OBJ","SVG_NS","HTML_NS","isComplexType","o","nodeName","vnodeData","children","child","simple","lastSimple","vNodeChildren","walk","c","i","length","Array","isArray","String","$text$","newVNode","classData","className","class","Object","keys","filter","k","join","vdomFnUtils","vnode","$attrs$","$children$","$key$","tag","text","$tag$","$elm$","Host","isHost","node","forEach","cb","convertToPublic","convertToPrivate","vattrs","vchildren","vkey","vname","$name$","vtag","vtext","assign","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","classList","oldClasses","parseClassList","newClasses","remove","prop","removeProperty","setProperty","slice","isComplex","n","xlink","getAttribute","removeAttributeNS","removeAttribute","setAttributeNS","setAttribute","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","host","oldVnodeAttrs","newVnodeAttrs","undefined","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","createTextNode","createElementNS","appendChild","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","removeVnodes","callNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","idxInOld","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","elmToMove","isSameVnode","patch","nextSibling","parentNode","vnode1","vnode2","oldVNode","oldChildren","newChildren","textContent","data","vNode","ref","renderVdom","renderFnResults","$vnode$","rootVnode","getElement","getHostRef","createEvent","emit","detail","emitEvent","bubbles","composed","cancelable","dispatchEvent","attachToAncestor","ancestorComponent","$onRenderResolve$","r","scheduleUpdate","isInitialLoad","$ancestorComponent$","dispatch","dispatchHooks","writeTask","endSchedule","instance","promise","event","safeCall","then","updateComponent","endUpdate","rc","endRender","callRender","childrenPromises","postUpdate","postUpdateComponent","all","render","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","$onInstanceResolve$","nextTick","who","documentElement","namespace","arg","thenFn","parsePropertyValue","propValue","propType","parseFloat","getValue","propName","$instanceValues$","setValue","newVal","oldVal","$members$","$watchers$","watchMethods","watchMethodName","proxyComponent","Cstr","watchers","members","entries","prototype","memberFlags","defineProperty","configurable","enumerable","args","$onInstancePromise$","attrNameToPropName","Map","attributeChangedCallback","attrName","_oldValue","observedAttributes","_","m","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","fireConnectedCallback","endRegisterStyles","schedule","connectedCallback","endConnected","hasOwnProperty","$listeners$","disconnectedCallback","rmListener","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","HostElement","HTMLElement","constructor","self","registerHost","clearTimeout","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","firstChild","setTimeout","hostRefs","registerInstance","lazyInstance","console","error","cmpModules","exportName","bundleId","module","importedModule","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now","H","b","p"],"mappings":"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","sourcesContent":["const NAMESPACE = 'revo-dropdown';\n\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: h => h(),\n    raf: h => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets =  /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return true;\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if ( listeners) {\n        listeners.map(([flags, name, method]) => {\n            const target =  getHostListenerTarget(elm, flags) ;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        {\n            if (hostRef.$flags$ & 256 /* isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if ( flags & 4 /* TargetDocument */)\n        return doc;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) =>  (flags & 2 /* Capture */) !== 0;\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta);\n    let style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if ( !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle( elm.getRootNode(), cmpMeta);\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + ( cmp.$tagName$);\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        // normalize class / classname attributes\n        if ( vnodeData.key) {\n            key = vnodeData.key;\n        }\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter(k => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if ( typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    {\n        vnode.$key$ = key;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    {\n        vnode.$key$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if ( memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n        }\n        else if ( memberName === 'style') {\n            // update style attribute, css properties and values\n            {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if ( prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if ( prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if ( memberName === 'key')\n            ;\n        else if ( memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if ( ( !isProp ) && memberName[0] === 'o' && memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        let n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                            // tslint:disable-next-line: triple-equals\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    if ( xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    }\n                    else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if ( xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if ( newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        if ( !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = ( doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS,  newVNode.$tag$)\n            );\n        if ( isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    return elm;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ( parentElm);\n    let childNode;\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode,  before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // createKeyToOldIdx\n            idxInOld = -1;\n            {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if ( idxInOld >= 0) {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if ( newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        {\n            return vnode1.$key$ === vnode2.$key$;\n        }\n    }\n    return false;\n};\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    if ( text === null) {\n        {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        // element node\n        {\n            {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if ( oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if ( oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if ( oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if ( isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if ( oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst callNodeRefs = (vNode) => {\n    {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = ( hostElm);\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst getElement = (ref) => ( getHostRef(ref).$hostElement$ );\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* Bubbles */),\n                composed: !!(flags & 2 /* Composed */),\n                cancelable: !!(flags & 1 /* Cancellable */),\n                detail,\n            });\n        },\n    };\n};\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if ( ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise(r => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if ( hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return  writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance =  hostRef.$lazyInstance$ ;\n    let promise;\n    if (isInitialLoad) {\n        {\n            hostRef.$flags$ |= 256 /* isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if ( isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        {\n            // looks like we've got child nodes to render into this host element\n            // or we need to update the css class/attrs on the host element\n            // DOM WRITE!\n            {\n                renderVdom(hostRef, callRender(hostRef, instance));\n            }\n        }\n    }\n    if ( rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map(cb => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance) => {\n    try {\n        instance =  instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return instance;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance =  hostRef.$lazyInstance$ ;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    {\n        safeCall(instance, 'componentDidRender');\n    }\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => ( elm.classList.add('hydrated') );\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if ( propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if ( propType & 2 /* Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if ( propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm =  hostRef.$hostElement$ ;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance =  hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    if (( !(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && newVal !== oldVal) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if ( instance) {\n            // get an array of method names of watch functions to call\n            if ( cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map(watchMethodName => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if ( (flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if ( cmpMeta.$members$) {\n        if ( Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ( (memberFlags & 31 /* Prop */ || (( flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if ( flags & 1 /* isElementConstructor */ && memberFlags & 64 /* Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if ( ( flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ( (hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ( !Cstr.isProxied) {\n                // we'eve never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        if ( Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if ( ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the intial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if ( cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance =  hostRef.$lazyInstance$ ;\n        {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map(rmListener => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        {\n            safeCall(instance, 'disconnectedCallback');\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map(lazyBundle => lazyBundle[1].map(compactMeta => {\n        const cmpMeta = {\n            $flags$: compactMeta[0],\n            $tagName$: compactMeta[1],\n            $members$: compactMeta[2],\n            $listeners$: compactMeta[3],\n        };\n        {\n            cmpMeta.$members$ = compactMeta[2];\n        }\n        {\n            cmpMeta.$listeners$ = compactMeta[3];\n        }\n        {\n            cmpMeta.$watchers$ = {};\n        }\n        const tagName =  cmpMeta.$tagName$;\n        const HostElement = class extends HTMLElement {\n            // StencilLazyHost\n            constructor(self) {\n                // @ts-ignore\n                super(self);\n                self = this;\n                registerHost(self, cmpMeta);\n            }\n            connectedCallback() {\n                if (appLoadFallback) {\n                    clearTimeout(appLoadFallback);\n                    appLoadFallback = null;\n                }\n                if (isBootstrapping) {\n                    // connectedCallback will be processed once all components have been registered\n                    deferredConnectedCallbacks.push(this);\n                }\n                else {\n                    plt.jmp(() => connectedCallback(this));\n                }\n            }\n            disconnectedCallback() {\n                plt.jmp(() => disconnectedCallback(this));\n            }\n            componentOnReady() {\n                return getHostRef(this).$onReadyPromise$;\n            }\n        };\n        cmpMeta.$lazyBundleId$ = lazyBundle[0];\n        if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n            cmpTags.push(tagName);\n            customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n        }\n    }));\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map(host => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onInstancePromise$ = new Promise(r => (hostRef.$onInstanceResolve$ = r));\n    }\n    {\n        hostRef.$onReadyPromise$ = new Promise(r => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => ( 0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module =  cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    return import(\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${ ''}`).then(importedModule => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { Host as H, bootstrapLazy as b, createEvent as c, h, promiseResolve as p, registerInstance as r };\n"]},"metadata":{},"sourceType":"module"}